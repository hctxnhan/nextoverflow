// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tag {
  name      String  @id
  description String?
  followers User[]
  questions Question[]
}

model Question {
  id        Int      @id @default(autoincrement())
  title     String
  content      String
  createdAt DateTime @default(now())
  tags      Tag[]
  updatedAt DateTime @updatedAt
  author    User?     @relation(fields: [authorId], references: [clerkId], onDelete: SetNull)
  authorId  String?
  answers   Answer[]
  votes     Vote[]
  savedBy   UserSavedQuestion[]
}

model User {
  clerkId   String   @id
  name      String?
  username  String   @unique
  email     String   @unique
  password  String?
  bio       String?
  picture   String?
  reputation Int      @default(0)
  joinedAt  DateTime @default(now())
  questions Question[]
  answers   Answer[]
  followedTags Tag[]
  votes     Vote[]
  savedQuestions UserSavedQuestion[]
}

model Answer {
  id        Int      @id @default(autoincrement())
  content      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [clerkId])
  authorId  String
  question  Question @relation(fields: [questionId], references: [id])
  questionId Int
  votes     Vote[]
  parent   Answer?  @relation("ReplyTo", fields: [parentId], references: [id])
  parentId Int?
  replies  Answer[] @relation("ReplyTo")
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}

model Vote {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user    User     @relation(fields: [userId], references: [clerkId])
  userId  String
  question  Question? @relation(fields: [questionId], references: [id])
  questionId Int?
  answer    Answer?   @relation(fields: [answerId], references: [id])
  answerId  Int?
  voteType  VoteType

  @@unique([userId, questionId, answerId])
}

model UserSavedQuestion {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user    User     @relation(fields: [userId], references: [clerkId], onDelete: Cascade)
  userId  String
  question  Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId Int

  @@id([userId, questionId])
}